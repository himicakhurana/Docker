
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Timer;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.github.dockerjava.api.DockerClient;
import com.github.dockerjava.api.model.Container;
import com.github.dockerjava.core.DockerClientBuilder;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

/**
 * Servlet implementation class DockSchedule
 */
public class DockSchedule extends HttpServlet {
	private static final long serialVersionUID = 1L;
	public static final String CONTENT_TYPE_JSON = "application/json";
	public static final String CHARACTER_ENCODING_TYPE = "UTF-8";
	public static Timer timer1 = new Timer();

	/**
	 * Default constructor.
	 */
	public DockSchedule() {
		// TODO Auto-generated constructor stub
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		int firstSart = 0;
		int period = 10000 * 2;

		// TODO Auto-generated method stub
		String pol = request.getParameter("policy");
		String nocon = request.getParameter("nocont");
		int nocont = Integer.parseInt(nocon);

		// Scheduler rmmyTask = new Scheduler(timer1, nocont, "rm");

		System.out.println(pol + nocont);
		if (pol.equals("fcfs")) {
			List<Container> list = Util.fcfs(nocon);
			generateJSON(response, list);
		}
		if (pol.equals("rr")) {

			// rmmyTask.pol = "rr";
			// List<Container> list = Util.rr(nocont);
			// System.out.println(list.size());
			// DockerClient dockerClient =
			// DockerClientBuilder.getInstance().build();

			// List<Container> containers =
			// dockerClient.listContainersCmd().exec();
			List<Container> list = Util.rr(nocon);
			generateJSON(response, list);
		}
		if (pol.equals("rm")) {
			// rmmyTask.pol = "rm";

			List<Container> list = Util.random(nocon);
			System.out.println(list.size());
			/*
			 * for (Container c : list) {
			 * 
			 * System.out.println(c.getStatus()); }
			 */
			// DockerClient dockerClient =
			// DockerClientBuilder.getInstance().build();

			// List<Container> containers =
			// dockerClient.listContainersCmd().exec();

			generateJSON(response, list);
		}
		if (pol.equals("sjf")) {
			// rmmyTask.pol = "sjf";
			DockerClient dockerClient = DockerClientBuilder.getInstance().build();

			Map<String, Integer> imageMap = new HashMap<String, Integer>();

			List<Container> containers = dockerClient.listContainersCmd().exec();
			for (Container c : containers) {
				if (!imageMap.keySet().contains(c.getId())) {
					imageMap.put(c.getId(), randInt(1000, 3000));
				}
			}
			List<Result> rw = Util.sfs(nocont, imageMap);
			// List<Container> containers =
			// dockerClient.listContainersCmd().exec();
			 
			generateJSON(response, new ResultMap(rw,imageMap));
		}

	}

	private void generateJSON(HttpServletResponse response, Object objectJSON) throws IOException {
		// TODO Auto-generated method stub
		Gson gson = new GsonBuilder().disableHtmlEscaping().create();
		String jsonString = gson.toJson(objectJSON).toString();
		response.setContentType(CONTENT_TYPE_JSON);
		response.setCharacterEncoding(CHARACTER_ENCODING_TYPE);
		PrintWriter printWriter = response.getWriter();
		printWriter.write(jsonString);
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

	public static int randInt(int min, int max) {

		// Usually this can be a field rather than a method variable
		Random rand = new Random();

		// nextInt is normally exclusive of the top value,
		// so add 1 to make it inclusive
		int randomNum = rand.nextInt((max - min) + 1) + min;

		return randomNum;
	}
}
